#BlueJ class context
comment0.params=xmin\ ymin\ xmax\ ymax
comment0.target=RectHV(double,\ double,\ double,\ double)
comment0.text=\r\n\ Initializes\ a\ new\ rectangle\ [<em>xmin</em>,\ <em>xmax</em>]\r\n\ x\ [<em>ymin</em>,\ <em>ymax</em>].\r\n\r\n\ @param\ \ xmin\ the\ <em>x</em>-coordinate\ of\ the\ lower-left\ endpoint\r\n\ @param\ \ xmax\ the\ <em>x</em>-coordinate\ of\ the\ upper-right\ endpoint\r\n\ @param\ \ ymin\ the\ <em>y</em>-coordinate\ of\ the\ lower-left\ endpoint\r\n\ @param\ \ ymax\ the\ <em>y</em>-coordinate\ of\ the\ upper-right\ endpoint\r\n\ @throws\ IllegalArgumentException\ if\ any\ of\ {@code\ xmin},\r\n\ \ \ \ \ \ \ \ \ {@code\ xmax},\ {@code\ ymin},\ or\ {@code\ ymax}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ Double.NaN}.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ xmax\ <\ xmin}\ or\ {@code\ ymax\ <\ ymin}.\r\n
comment1.params=
comment1.target=double\ xmin()
comment1.text=\r\n\ Returns\ the\ minimum\ <em>x</em>-coordinate\ of\ any\ point\ in\ this\ rectangle.\r\n\r\n\ @return\ the\ minimum\ <em>x</em>-coordinate\ of\ any\ point\ in\ this\ rectangle\r\n
comment10.params=p
comment10.target=double\ distanceSquaredTo(Point2D)
comment10.text=\r\n\ Returns\ the\ square\ of\ the\ Euclidean\ distance\ between\ this\ rectangle\ and\ the\ point\ {@code\ p}.\r\n\r\n\ @param\ \ p\ the\ point\r\n\ @return\ the\ square\ of\ the\ Euclidean\ distance\ between\ the\ point\ {@code\ p}\ and\r\n\ \ \ \ \ \ \ \ \ the\ closest\ point\ on\ this\ rectangle;\ 0\ if\ the\ point\ is\ contained\r\n\ \ \ \ \ \ \ \ \ in\ this\ rectangle\r\n
comment11.params=other
comment11.target=boolean\ equals(java.lang.Object)
comment11.text=\r\n\ Compares\ this\ rectangle\ to\ the\ specified\ rectangle.\r\n\r\n\ @param\ \ other\ the\ other\ rectangle\r\n\ @return\ {@code\ true}\ if\ this\ rectangle\ equals\ {@code\ other};\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment12.params=
comment12.target=int\ hashCode()
comment12.text=\r\n\ Returns\ an\ integer\ hash\ code\ for\ this\ rectangle.\r\n\ @return\ an\ integer\ hash\ code\ for\ this\ rectangle\r\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ rectangle.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ rectangle,\ using\ the\ format\r\n\ \ \ \ \ \ \ \ \ {@code\ [xmin,\ xmax]\ x\ [ymin,\ ymax]}\r\n
comment14.params=
comment14.target=void\ draw()
comment14.text=\r\n\ Draws\ this\ rectangle\ to\ standard\ draw.\r\n
comment2.params=
comment2.target=double\ xmax()
comment2.text=\r\n\ Returns\ the\ maximum\ <em>x</em>-coordinate\ of\ any\ point\ in\ this\ rectangle.\r\n\r\n\ @return\ the\ maximum\ <em>x</em>-coordinate\ of\ any\ point\ in\ this\ rectangle\r\n
comment3.params=
comment3.target=double\ ymin()
comment3.text=\r\n\ Returns\ the\ minimum\ <em>y</em>-coordinate\ of\ any\ point\ in\ this\ rectangle.\r\n\r\n\ @return\ the\ minimum\ <em>y</em>-coordinate\ of\ any\ point\ in\ this\ rectangle\r\n
comment4.params=
comment4.target=double\ ymax()
comment4.text=\r\n\ Returns\ the\ maximum\ <em>y</em>-coordinate\ of\ any\ point\ in\ this\ rectangle.\r\n\r\n\ @return\ the\ maximum\ <em>y</em>-coordinate\ of\ any\ point\ in\ this\ rectangle\r\n
comment5.params=
comment5.target=double\ width()
comment5.text=\r\n\ Returns\ the\ width\ of\ this\ rectangle.\r\n\r\n\ @return\ the\ width\ of\ this\ rectangle\ {@code\ xmax\ -\ xmin}\r\n
comment6.params=
comment6.target=double\ height()
comment6.text=\r\n\ Returns\ the\ height\ of\ this\ rectangle.\r\n\r\n\ @return\ the\ height\ of\ this\ rectangle\ {@code\ ymax\ -\ ymin}\r\n
comment7.params=that
comment7.target=boolean\ intersects(RectHV)
comment7.text=\r\n\ Returns\ true\ if\ the\ two\ rectangles\ intersect.\ This\ includes\r\n\ <em>improper\ intersections</em>\ (at\ points\ on\ the\ boundary\r\n\ of\ each\ rectangle)\ and\ <em>nested\ intersctions</em>\r\n\ (when\ one\ rectangle\ is\ contained\ inside\ the\ other)\r\n\r\n\ @param\ \ that\ the\ other\ rectangle\r\n\ @return\ {@code\ true}\ if\ this\ rectangle\ intersect\ the\ argument\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ rectangle\ at\ one\ or\ more\ points\r\n
comment8.params=p
comment8.target=boolean\ contains(Point2D)
comment8.text=\r\n\ Returns\ true\ if\ this\ rectangle\ contain\ the\ point.\r\n\ @param\ \ p\ the\ point\r\n\ @return\ {@code\ true}\ if\ this\ rectangle\ contain\ the\ point\ {@code\ p},\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ possibly\ at\ the\ boundary;\ {@code\ false}\ otherwise\r\n
comment9.params=p
comment9.target=double\ distanceTo(Point2D)
comment9.text=\r\n\ Returns\ the\ Euclidean\ distance\ between\ this\ rectangle\ and\ the\ point\ {@code\ p}.\r\n\r\n\ @param\ \ p\ the\ point\r\n\ @return\ the\ Euclidean\ distance\ between\ the\ point\ {@code\ p}\ and\ the\ closest\ point\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ on\ this\ rectangle;\ 0\ if\ the\ point\ is\ contained\ in\ this\ rectangle\r\n
numComments=15
