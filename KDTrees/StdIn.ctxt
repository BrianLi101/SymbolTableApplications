#BlueJ class context
comment0.params=
comment0.target=StdIn()
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\r\n\ Returns\ true\ if\ standard\ input\ is\ empty\ (except\ possibly\ for\ whitespace).\r\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \r\n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\r\n\r\n\ @return\ {@code\ true}\ if\ standard\ input\ is\ empty\ (except\ possibly\r\n\ \ \ \ \ \ \ \ \ for\ whitespace);\ {@code\ false}\ otherwise\r\n
comment10.params=
comment10.target=float\ readFloat()
comment10.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ float,\ and\ returns\ the\ float.\r\n\r\n\ @return\ the\ next\ float\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ float}\r\n
comment11.params=
comment11.target=long\ readLong()
comment11.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ long\ integer,\ and\ returns\ the\ long\ integer.\r\n\r\n\ @return\ the\ next\ long\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ long}\r\n
comment12.params=
comment12.target=short\ readShort()
comment12.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ short\ integer,\ and\ returns\ the\ short\ integer.\r\n\r\n\ @return\ the\ next\ short\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ short}\r\n
comment13.params=
comment13.target=byte\ readByte()
comment13.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ byte,\ and\ returns\ the\ byte.\r\n\r\n\ @return\ the\ next\ byte\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ byte}\r\n
comment14.params=
comment14.target=boolean\ readBoolean()
comment14.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ boolean,\r\n\ and\ returns\ the\ boolean.\r\n\r\n\ @return\ the\ next\ boolean\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ boolean}\:\r\n\ \ \ \ {@code\ true}\ or\ {@code\ 1}\ for\ true,\ and\ {@code\ false}\ or\ {@code\ 0}\ for\ false,\r\n\ \ \ \ ignoring\ case\r\n
comment15.params=
comment15.target=java.lang.String[]\ readAllStrings()
comment15.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\r\n\ @return\ all\ remaining\ tokens\ on\ standard\ input,\ as\ an\ array\ of\ strings\r\n
comment16.params=
comment16.target=java.lang.String[]\ readAllLines()
comment16.text=\r\n\ Reads\ all\ remaining\ lines\ from\ standard\ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ @return\ all\ remaining\ lines\ on\ standard\ input,\ as\ an\ array\ of\ strings\r\n
comment17.params=
comment17.target=int[]\ readAllInts()
comment17.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ integers,\ and\ returns\r\n\ them\ as\ an\ array\ of\ integers.\r\n\ @return\ all\ remaining\ integers\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ an\ {@code\ int}\r\n
comment18.params=
comment18.target=long[]\ readAllLongs()
comment18.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ longs,\ and\ returns\r\n\ them\ as\ an\ array\ of\ longs.\r\n\ @return\ all\ remaining\ longs\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ {@code\ long}\r\n
comment19.params=
comment19.target=double[]\ readAllDoubles()
comment19.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ doubles,\ and\ returns\r\n\ them\ as\ an\ array\ of\ doubles.\r\n\ @return\ all\ remaining\ doubles\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ {@code\ double}\r\n
comment2.params=
comment2.target=boolean\ hasNextLine()
comment2.text=\r\n\ Returns\ true\ if\ standard\ input\ has\ a\ next\ line.\r\n\ Use\ this\ method\ to\ know\ whether\ the\r\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextChar()}.\r\n\r\n\ @return\ {@code\ true}\ if\ standard\ input\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment20.params=
comment20.target=void\ resync()
comment20.text=\r\n\ If\ StdIn\ changes,\ use\ this\ to\ reinitialize\ the\ scanner.\r\n
comment21.params=scanner
comment21.target=void\ setScanner(java.util.Scanner)
comment22.params=
comment22.target=int[]\ readInts()
comment22.text=\r\n\ Reads\ all\ remaining\ tokens,\ parses\ them\ as\ integers,\ and\ returns\r\n\ them\ as\ an\ array\ of\ integers.\r\n\ @return\ all\ remaining\ integers,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ an\ {@code\ int}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#readAllInts()}.\r\n
comment23.params=
comment23.target=double[]\ readDoubles()
comment23.text=\r\n\ Reads\ all\ remaining\ tokens,\ parses\ them\ as\ doubles,\ and\ returns\r\n\ them\ as\ an\ array\ of\ doubles.\r\n\ @return\ all\ remaining\ doubles,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ {@code\ double}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#readAllDoubles()}.\r\n
comment24.params=
comment24.target=java.lang.String[]\ readStrings()
comment24.text=\r\n\ Reads\ all\ remaining\ tokens\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ @return\ all\ remaining\ tokens,\ as\ an\ array\ of\ strings\r\n\ @deprecated\ Replaced\ by\ {@link\ \#readAllStrings()}.\r\n
comment25.params=args
comment25.target=void\ main(java.lang.String[])
comment25.text=\r\n\ Interactive\ test\ of\ basic\ functionality.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=
comment3.target=boolean\ hasNextChar()
comment3.text=\r\n\ Returns\ true\ if\ standard\ input\ has\ more\ inputy\ (including\ whitespace).\r\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextLine()}.\r\n\r\n\ @return\ {@code\ true}\ if\ standard\ input\ has\ more\ input\ (including\ whitespace);\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment4.params=
comment4.target=java.lang.String\ readLine()
comment4.text=\r\n\ Reads\ and\ returns\ the\ next\ line,\ excluding\ the\ line\ separator\ if\ present.\r\n\r\n\ @return\ the\ next\ line,\ excluding\ the\ line\ separator\ if\ present;\r\n\ \ \ \ \ \ \ \ \ {@code\ null}\ if\ no\ such\ line\r\n
comment5.params=
comment5.target=char\ readChar()
comment5.text=\r\n\ Reads\ and\ returns\ the\ next\ character.\r\n\r\n\ @return\ the\ next\ character\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment6.params=
comment6.target=java.lang.String\ readAll()
comment6.text=\r\n\ Reads\ and\ returns\ the\ remainder\ of\ the\ input,\ as\ a\ string.\r\n\r\n\ @return\ the\ remainder\ of\ the\ input,\ as\ a\ string\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment7.params=
comment7.target=java.lang.String\ readString()
comment7.text=\r\n\ Reads\ the\ next\ token\ \ and\ returns\ the\ {@code\ String}.\r\n\r\n\ @return\ the\ next\ {@code\ String}\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment8.params=
comment8.target=int\ readInt()
comment8.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ an\ integer,\ and\ returns\ the\ integer.\r\n\r\n\ @return\ the\ next\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ an\ {@code\ int}\r\n
comment9.params=
comment9.target=double\ readDouble()
comment9.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ double,\ and\ returns\ the\ double.\r\n\r\n\ @return\ the\ next\ double\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ double}\r\n
numComments=26
