#BlueJ class context
comment0.params=
comment0.target=BST()
comment0.text=\r\n\ Initializes\ an\ empty\ symbol\ table.\r\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\r\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\ {@code\ false}\ otherwise\r\n
comment10.params=x
comment10.target=BST.Node\ deleteMin(BST.Node)
comment11.params=
comment11.target=void\ deleteMax()
comment11.text=\r\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment12.params=x
comment12.target=BST.Node\ deleteMax(BST.Node)
comment13.params=key
comment13.target=void\ delete(java.lang.Comparable)
comment13.text=\r\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \r\n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment14.params=x\ key
comment14.target=BST.Node\ delete(BST.Node,\ java.lang.Comparable)
comment15.params=
comment15.target=java.lang.Comparable\ min()
comment15.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment16.params=x
comment16.target=BST.Node\ min(BST.Node)
comment17.params=
comment17.target=java.lang.Comparable\ max()
comment17.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment18.params=x
comment18.target=BST.Node\ max(BST.Node)
comment19.params=key
comment19.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment19.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment2.params=
comment2.target=int\ size()
comment2.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment20.params=x\ key
comment20.target=BST.Node\ floor(BST.Node,\ java.lang.Comparable)
comment21.params=key
comment21.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment21.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment22.params=x\ key
comment22.target=BST.Node\ ceiling(BST.Node,\ java.lang.Comparable)
comment23.params=k
comment23.target=java.lang.Comparable\ select(int)
comment23.text=\r\n\ Return\ the\ kth\ smallest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @param\ \ k\ the\ order\ statistic\r\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\r\n\ \ \ \ \ \ \ \ <em>n</em>\u20131\r\n
comment24.params=x\ k
comment24.target=BST.Node\ select(BST.Node,\ int)
comment25.params=key
comment25.target=int\ rank(java.lang.Comparable)
comment25.text=\r\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment26.params=key\ x
comment26.target=int\ rank(java.lang.Comparable,\ BST.Node)
comment27.params=
comment27.target=java.lang.Iterable\ keys()
comment27.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\r\n
comment28.params=lo\ hi
comment28.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment28.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\r\n\ as\ an\ {@code\ Iterable}.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment29.params=x\ queue\ lo\ hi
comment29.target=void\ keys(BST.Node,\ Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment3.params=x
comment3.target=int\ size(BST.Node)
comment30.params=lo\ hi
comment30.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment30.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment31.params=
comment31.target=int\ height()
comment31.text=\r\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\r\n\r\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\r\n
comment32.params=x
comment32.target=int\ height(BST.Node)
comment33.params=
comment33.target=java.lang.Iterable\ levelOrder()
comment33.text=\r\n\ Returns\ the\ keys\ in\ the\ BST\ in\ level\ order\ (for\ debugging).\r\n\r\n\ @return\ the\ keys\ in\ the\ BST\ in\ level\ order\ traversal\r\n
comment34.params=
comment34.target=boolean\ check()
comment34.text=\r\n\ \ Check\ integrity\ of\ BST\ data\ structure.\r\n
comment35.params=
comment35.target=boolean\ isBST()
comment36.params=x\ min\ max
comment36.target=boolean\ isBST(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment37.params=
comment37.target=boolean\ isSizeConsistent()
comment38.params=x
comment38.target=boolean\ isSizeConsistent(BST.Node)
comment39.params=
comment39.target=boolean\ isRankConsistent()
comment4.params=key
comment4.target=boolean\ contains(java.lang.Comparable)
comment4.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment40.params=args
comment40.target=void\ main(java.lang.String[])
comment40.text=\r\n\ Unit\ tests\ the\ {@code\ BST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment5.params=key
comment5.target=java.lang.Object\ get(java.lang.Comparable)
comment5.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment6.params=x\ key
comment6.target=java.lang.Object\ get(BST.Node,\ java.lang.Comparable)
comment7.params=key\ val
comment7.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment7.text=\r\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \r\n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\r\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\r\n\ if\ the\ specified\ value\ is\ {@code\ null}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @param\ \ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment8.params=x\ key\ val
comment8.target=BST.Node\ put(BST.Node,\ java.lang.Comparable,\ java.lang.Object)
comment9.params=
comment9.target=void\ deleteMin()
comment9.text=\r\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
numComments=41
