#BlueJ class context
comment0.params=
comment0.target=RedBlackBST()
comment0.text=\r\n\ Initializes\ an\ empty\ symbol\ table.\r\n
comment1.params=x
comment1.target=boolean\ isRed(RedBlackBST.Node)
comment1.text=\r\n\ \ Node\ helper\ methods.\r\n
comment10.params=
comment10.target=void\ deleteMin()
comment10.text=\r\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment11.params=h
comment11.target=RedBlackBST.Node\ deleteMin(RedBlackBST.Node)
comment12.params=
comment12.target=void\ deleteMax()
comment12.text=\r\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment13.params=h
comment13.target=RedBlackBST.Node\ deleteMax(RedBlackBST.Node)
comment14.params=key
comment14.target=void\ delete(java.lang.Comparable)
comment14.text=\r\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \r\n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment15.params=h\ key
comment15.target=RedBlackBST.Node\ delete(RedBlackBST.Node,\ java.lang.Comparable)
comment16.params=h
comment16.target=RedBlackBST.Node\ rotateRight(RedBlackBST.Node)
comment16.text=\r\n\ \ Red-black\ tree\ helper\ functions.\r\n
comment17.params=h
comment17.target=RedBlackBST.Node\ rotateLeft(RedBlackBST.Node)
comment18.params=h
comment18.target=void\ flipColors(RedBlackBST.Node)
comment19.params=h
comment19.target=RedBlackBST.Node\ moveRedLeft(RedBlackBST.Node)
comment2.params=x
comment2.target=int\ size(RedBlackBST.Node)
comment20.params=h
comment20.target=RedBlackBST.Node\ moveRedRight(RedBlackBST.Node)
comment21.params=h
comment21.target=RedBlackBST.Node\ balance(RedBlackBST.Node)
comment22.params=
comment22.target=int\ height()
comment22.text=\r\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\r\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\r\n
comment23.params=x
comment23.target=int\ height(RedBlackBST.Node)
comment24.params=
comment24.target=java.lang.Comparable\ min()
comment24.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment25.params=x
comment25.target=RedBlackBST.Node\ min(RedBlackBST.Node)
comment26.params=
comment26.target=java.lang.Comparable\ max()
comment26.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment27.params=x
comment27.target=RedBlackBST.Node\ max(RedBlackBST.Node)
comment28.params=key
comment28.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment28.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment29.params=x\ key
comment29.target=RedBlackBST.Node\ floor(RedBlackBST.Node,\ java.lang.Comparable)
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment30.params=key
comment30.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment30.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment31.params=x\ key
comment31.target=RedBlackBST.Node\ ceiling(RedBlackBST.Node,\ java.lang.Comparable)
comment32.params=k
comment32.target=java.lang.Comparable\ select(int)
comment32.text=\r\n\ Return\ the\ kth\ smallest\ key\ in\ the\ symbol\ table.\r\n\ @param\ k\ the\ order\ statistic\r\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\r\n\ \ \ \ \ <em>n</em>\u20131\r\n
comment33.params=x\ k
comment33.target=RedBlackBST.Node\ select(RedBlackBST.Node,\ int)
comment34.params=key
comment34.target=int\ rank(java.lang.Comparable)
comment34.text=\r\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment35.params=key\ x
comment35.target=int\ rank(java.lang.Comparable,\ RedBlackBST.Node)
comment36.params=
comment36.target=java.lang.Iterable\ keys()
comment36.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}\r\n
comment37.params=lo\ hi
comment37.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment37.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\r\n\ as\ an\ {@code\ Iterable}.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ all\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\ as\ an\ {@code\ Iterable}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ is\ {@code\ null}\r\n
comment38.params=lo\ hi
comment38.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment38.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ the\ number\ of\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ is\ {@code\ null}\r\n
comment39.params=
comment39.target=boolean\ check()
comment39.text=\r\n\ \ Check\ integrity\ of\ red-black\ tree\ data\ structure.\r\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\r\n\ Is\ this\ symbol\ table\ empty?\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty\ and\ {@code\ false}\ otherwise\r\n
comment40.params=
comment40.target=boolean\ isBST()
comment41.params=x\ min\ max
comment41.target=boolean\ isBST(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment42.params=
comment42.target=boolean\ isSizeConsistent()
comment43.params=x
comment43.target=boolean\ isSizeConsistent(RedBlackBST.Node)
comment44.params=
comment44.target=boolean\ isRankConsistent()
comment45.params=
comment45.target=boolean\ is23()
comment46.params=x
comment46.target=boolean\ is23(RedBlackBST.Node)
comment47.params=
comment47.target=boolean\ isBalanced()
comment48.params=x\ black
comment48.target=boolean\ isBalanced(RedBlackBST.Node,\ int)
comment49.params=args
comment49.target=void\ main(java.lang.String[])
comment49.text=\r\n\ Unit\ tests\ the\ {@code\ RedBlackBST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment5.params=key
comment5.target=java.lang.Object\ get(java.lang.Comparable)
comment5.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment6.params=x\ key
comment6.target=java.lang.Object\ get(RedBlackBST.Node,\ java.lang.Comparable)
comment7.params=key
comment7.target=boolean\ contains(java.lang.Comparable)
comment7.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\ @param\ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment8.params=key\ val
comment8.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment8.text=\r\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \r\n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\r\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\r\n\ if\ the\ specified\ value\ is\ {@code\ null}.\r\n\r\n\ @param\ key\ the\ key\r\n\ @param\ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment9.params=h\ key\ val
comment9.target=RedBlackBST.Node\ put(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Object)
numComments=50
